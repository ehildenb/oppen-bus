---- Given two order-sorted signatures (as Modules),
---- calculate the intersection of two. 

fmod INTERSECTION is
  protecting META-LEVEL .
endfm

set include NAT off .
set include INT off .
set include RAT off .
set include BOOL off .

fmod MYINT is
  sorts N NzN .
  sorts I NzI .
  subsort NzN < NzI N < I .

  op 0 : -> N [ctor] .
  op 1 : -> NzN [ctor] .
  op _+_ : N NzN -> NzN [ctor assoc comm id: 0 prec 26] .
  op _+_ : N N   -> N   [ctor ditto] .
  op _+_ : I I   -> I   [ctor ditto] .

  op _*_ : NzN NzN -> NzN [assoc comm id: 1 prec 24] .
  op _*_ : NzI NzI -> NzI [ditto] .
  op _*_ : N   N   -> N   [ditto] .
  op _*_ : I   I   -> I   [ditto] .
endfm

fmod MYINT-RAT is
  protecting MYINT .

  sorts R NzR .
  subsorts NzI < NzR < R .
  subsort I < R .

  op _+_ : R   R   -> R   [ctor ditto] .
  op _*_ : R   R   -> R   [ditto] .
  op _*_ : NzR NzR -> NzR [ditto] .

  op _/_ : R NzR -> R [ctor right id: 1 prec 25] .
endfm

fmod MYINT-LIST is
  protecting MYINT .

  sorts NeList List .
  subsort NeList < List .

  op nil : -> List .
  op _,_ : I List -> NeList [ctor prec 27] .
endfm

reduce in INTERSECTION :
  upModule('MYINT-RAT, true) .
reduce in INTERSECTION :
  upModule('MYINT-LIST, true) .

quit
