load ../src/vabs.maude
load ../src/purification.maude

------------------------------------------------------------
----              Testing Modules:                      ----
----   MYINT, MYINT-RAT, MYINT-LIST, and MYINT-COMBINED ----
------------------------------------------------------------

set include BOOL off .

fmod MYINT is

  sorts N NzN .
  sorts I NzI .
  subsort NzN < NzI N < I .

  op zero : -> N [ctor] .
  op one : -> NzN [ctor] .
  op _+_ : N NzN -> NzN [ctor assoc comm id: zero prec 26] .
  op _+_ : N N   -> N   [ctor ditto] .
  op _+_ : I I   -> I   [ctor ditto] .

  op _*_ : NzN NzN -> NzN [assoc comm id: one prec 24] .
  op _*_ : NzI NzI -> NzI [ditto] .
  op _*_ : N   N   -> N   [ditto] .
  op _*_ : I   I   -> I   [ditto] .
endfm


fmod MYINT-RAT is
  protecting MYINT .

  sorts R NzR .
  subsorts NzI < NzR < R .
  subsort I < R .

  op _+_ : R   R   -> R   [ctor ditto] .
  op _*_ : R   R   -> R   [ditto] .
  op _*_ : NzR NzR -> NzR [ditto] .

  op _/_ : R NzR -> R [ctor right id: one prec 25] .
endfm

fmod MYINT-LIST is
  protecting MYINT .

  sorts NeList List .
  subsort NeList < List .

  op nil : -> List .
  op _,_ : I List -> NeList [ctor prec 27] .
endfm

fmod MYINT-COMBINED is
  protecting MYINT-LIST + MYINT-RAT .
endfm

fmod TEST-MODULE is
  sorts A B .
  subsort A < B .
    
  op a : -> A .
  op b : -> B .
    
  op f : B -> A .
  ---------------
  eq f(b) = a .
endfm


fmod TEST1 is
  sorts A B .
  subsort A < B .

  op a : -> A .
  op b : -> B .

  op f : B -> A .
endfm

fmod TEST2 is
  sorts A B .
  subsort A < B .

  op a : -> A .
  op b : -> B .

  op f : A -> A .
endfm

fmod TEST1-INTERSECT-TEST2 is
  sorts A B .
  subsort A < B .

  op a : -> A .
  op b : -> B .

  op f : A -> A .
endfm

set include BOOL on .

fmod TESTS is
    protecting PURIFICATION .
    protecting VABS .

    op TERM_ : Nat -> Term .

    eq TERM 1 = 'x:A .
    eq TERM 2 = 'f['a.A] .
    eq TERM 3 = 'f['b.A] .
    eq TERM 4 = 'f['f['a.A]] .
    eq TERM 5 = 'f['f['f['x:A]]] .

    eq TERM 6  = '_+_['zero.N, 'x:N] .
    eq TERM 7  = '_/_['one.NzN, 'y:NzN] .
    eq TERM 8  = '_*_['zero.N, 'x:N] .
    eq TERM 9  = '_`,_['zero.N, '_`,_[TERM 7, 'nil.List]] .
    eq TERM 10 = '_`,_[TERM 8, '_`,_[TERM 7, 'nil.List]] .
    eq TERM 11  = '_`,_['x:N, '_`,_[TERM 8, 'nil.List]] .
    
endfm

    
reduce vabs('TEST-MODULE, TERM 1 ?= TERM 2) .
reduce vabs('TEST-MODULE, TERM 4 ?= TERM 2) .
reduce vabs('TEST-MODULE, TERM 4 ?= TERM 3) .
reduce vabs('TEST-MODULE, TERM 4 ?= TERM 2 /\ TERM 4 != TERM 2) .
reduce vabs('TEST-MODULE, TERM 4 ?= TERM 2 /\ TERM 5 != TERM 2) .
reduce vabs('TEST-MODULE, TERM 3 ?= TERM 2 /\ TERM 5 != TERM 3) .

reduce vabs('MYINT-COMBINED, TERM 6 ?= TERM 7) .
reduce vabs('MYINT-COMBINED, TERM 9 != TERM 11) .
reduce vabs('MYINT-COMBINED, TERM 9 ?= TERM 11 /\ TERM 10 != TERM 11) .
reduce vabs('MYINT-COMBINED, TERM 8 ?= TERM 7 /\ TERM 10 != TERM 11) .

reduce purifyTerm('MYINT-RAT, 'MYINT-LIST, TERM 6) .
reduce purifyTerm('MYINT-RAT, 'MYINT-LIST, TERM 7) .
reduce purifyTerm('MYINT-RAT, 'MYINT-LIST, TERM 8) .

reduce purifyTerm('MYINT-LIST, 'MYINT-RAT, TERM 6) .
reduce purifyTerm('MYINT-LIST, 'MYINT-RAT, TERM 7) .
reduce purifyTerm('MYINT-LIST, 'MYINT-RAT, TERM 8) .
reduce purifyTerm('MYINT-LIST, 'MYINT-RAT, TERM 9) .
reduce purifyTerm('MYINT-LIST, 'MYINT-RAT, TERM 10) .
reduce purifyTerm('MYINT-LIST, 'MYINT-RAT, TERM 11) .

reduce purify('MYINT-LIST, 'MYINT-RAT, TERM 6 ?= TERM 7) .
reduce purify('MYINT-LIST, 'MYINT-RAT, TERM 9 ?= TERM 10) .
reduce purify('TEST1, 'TEST2, TERM 1 ?= TERM 5 /\ TERM 2 != TERM 3) .

---- Something goes wrong here!!

match M:FModule <=?
(upModule('MYINT-LIST, true)) .

reduce (upModule('MYINT-LIST, true)) .

--- 1/y is a subterm of an I List, but 1/y is only an I when y is 1.
--- We need to check that there is a ground instance of 1/y of sort I.
--- This is a *semantic* check, and wellFormed cannot perform this check.
--- reduce vabs('MYINT-COMBINED, TERM 9 ?= TERM 10) .


--- Variable abstraction:


*** Sample input/output:

*** Input:  x ?= f(a)
*** Output: V0 ?= a /\ x ?= f(V0)

*** Input:  f(f(a)) ?= f(a)
*** Output: V0 ?= a /\ V1 ?= f(V0) /\ V1 ?= f(V1)
    
*** Input:  f(f(a)) ?= f(b)
*** Output: V0 ?= a /\ V1 ?= b /\ V2 ?= f(V0) /\ V3 ?= f(V1) /\ V3 ?= f(V2)

*** Input:  f(f(a)) ?= f(a) /\ f(f(a)) != f(a)
*** Output: V0 ?= a /\ V1 ?= f(V0) /\ V1 ?= f(V1) /\ V1 != f(V1)

--- Fix these
*** Input:  f(f(a)) ?= f(a) /\ f(f(f(x))) != f(a)
*** Output: V0 ?= a /\ V1 ?= f(V0) /\ rest

*** Input:  f(b) ?= f(a) /\ f(f(f(x))) != f(b)

quit

